import 'package:flutter/material.dart';
import 'package:pocket_plus/core/constants/content_types.dart'; // Donde est√° allContentSubtypes

class SubtypeSelectorGrid extends StatelessWidget {
  final String? selectedSubtypeName;
  final ValueChanged<ContentSubtype> onSubtypeSelected;

  const SubtypeSelectorGrid({
    super.key,
    this.selectedSubtypeName,
    required this.onSubtypeSelected,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    // Mapeo de subtipo a emoji (todos los subtipos)
    String getEmojiForSubtype(String name) {
      switch (name) {
        // Texto/Documentos
        case 'Art√≠culo': return 'üì∞';
        case 'Libro': return 'üìö';
        case 'Lista lectura': return 'üìù';
        case 'Noticia': return 'üóûÔ∏è';
        case 'PDF': return 'üìÑ';
        case 'Nota': return 'üóíÔ∏è';
        case 'Post': return '‚úâÔ∏è';
        // Multimedia
        case 'Video': return 'üìπ';
        case 'Pel√≠cula': return 'üé¨';
        case 'Podcast': return 'üéß';
        case 'M√∫sica': return 'üéµ';
        case 'Juego': return 'üéÆ';
        case 'Trailer': return 'üéûÔ∏è';
        // Productividad/Educaci√≥n
        case 'Curso': return 'üè´';
        case 'T√©cnica': return 'üß†';
        case 'Productividad': return '‚úÖ';
        case 'Creativo': return 'üé®';
        case 'Proyecto': return 'üìÅ';
        case 'Herramienta': return 'üõ†Ô∏è';
        case 'Plugin': return 'üß©';
        case 'Recurso': return 'üß∞';
        case 'Idea': return 'üí°';
        // Lugares/Eventos
        case 'Restaurante': return 'üçΩÔ∏è';
        case 'Lugar': return 'üìç';
        case 'Actividad': return 'üèÉ';
        case 'Hotel': return 'üè®';
        case 'Evento': return 'üéâ';
        case 'Viaje': return '‚úàÔ∏è';
        case 'Reuni√≥n': return 'üë•';
        // Compras
        case 'Producto': return 'üì¶';
        case 'Tienda': return 'üè™';
        case 'Regalo': return 'üéÅ';
        case 'Cosm√©tico': return 'üíÑ';
        // Comida
        case 'Alimento': return 'üçû';
        case 'Receta': return 'üìñ';
        case 'Platillo': return 'üçΩÔ∏è';
        // Miscel√°neos
        case 'Experimento': return 'üß™';
        case 'Colecci√≥n': return 'üóÇÔ∏è';
        case 'Web': return 'üåê';
        case 'App': return 'üì±';
        case 'Otro': return '‚ú®';
        default: return 'üîñ';
      }
    }

    return SizedBox(
      height: 220, // Altura est√°ndar para el grid de subtipos
      child: GridView.builder(
        shrinkWrap: true, // Para que funcione dentro de un SingleChildScrollView
        physics: const ScrollPhysics(), // Permite scroll solo en el grid
        itemCount: allContentSubtypes.length,
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 3, // 3 columnas como en el maquetado
          childAspectRatio: 1.0, // Hace que los √≠tems sean cuadrados
          crossAxisSpacing: 10,
          mainAxisSpacing: 10,
        ),
        itemBuilder: (context, index) {
          final subtype = allContentSubtypes[index];
          final bool isSelected = selectedSubtypeName == subtype.name;

          return InkWell(
            onTap: () => onSubtypeSelected(subtype),
            borderRadius: BorderRadius.circular(12.0),
            child: Card(
              elevation: isSelected ? 4.0 : 1.0,
              color: isSelected ? theme.colorScheme.primaryContainer : theme.cardColor,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12.0),
                side: BorderSide(
                  color: isSelected ? theme.colorScheme.primary : Colors.grey[300]!,
                  width: isSelected ? 2.0 : 1.0,
                ),
              ),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    getEmojiForSubtype(subtype.name),
                    style: const TextStyle(fontSize: 30),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    subtype.name,
                    textAlign: TextAlign.center,
                    style: theme.textTheme.bodySmall?.copyWith(
                      fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                      color: isSelected ? theme.colorScheme.onPrimaryContainer : theme.colorScheme.onSurfaceVariant,
                    ),
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}